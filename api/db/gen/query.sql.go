// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
)

const listLogsByService = `-- name: ListLogsByService :many
SELECT id, timestamp, event_category, source_type, username, hostname, severity, raw_message, is_blacklisted FROM parsed_logs
WHERE event_category = $1
ORDER BY timestamp DESC
LIMIT 100
`

func (q *Queries) ListLogsByService(ctx context.Context, eventCategory string) ([]ParsedLog, error) {
	rows, err := q.db.QueryContext(ctx, listLogsByService, eventCategory)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ParsedLog
	for rows.Next() {
		var i ParsedLog
		if err := rows.Scan(
			&i.ID,
			&i.Timestamp,
			&i.EventCategory,
			&i.SourceType,
			&i.Username,
			&i.Hostname,
			&i.Severity,
			&i.RawMessage,
			&i.IsBlacklisted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLogsByServiceAndSeverity = `-- name: ListLogsByServiceAndSeverity :many
SELECT id, timestamp, event_category, source_type, username, hostname, severity, raw_message, is_blacklisted FROM parsed_logs
WHERE event_category = $1 AND severity = $2
ORDER BY timestamp DESC
LIMIT 100
`

type ListLogsByServiceAndSeverityParams struct {
	EventCategory string
	Severity      string
}

func (q *Queries) ListLogsByServiceAndSeverity(ctx context.Context, arg ListLogsByServiceAndSeverityParams) ([]ParsedLog, error) {
	rows, err := q.db.QueryContext(ctx, listLogsByServiceAndSeverity, arg.EventCategory, arg.Severity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ParsedLog
	for rows.Next() {
		var i ParsedLog
		if err := rows.Scan(
			&i.ID,
			&i.Timestamp,
			&i.EventCategory,
			&i.SourceType,
			&i.Username,
			&i.Hostname,
			&i.Severity,
			&i.RawMessage,
			&i.IsBlacklisted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLogsBySeverity = `-- name: ListLogsBySeverity :many
SELECT id, timestamp, event_category, source_type, username, hostname, severity, raw_message, is_blacklisted FROM parsed_logs
WHERE severity = $1
ORDER BY timestamp DESC
LIMIT 100
`

func (q *Queries) ListLogsBySeverity(ctx context.Context, severity string) ([]ParsedLog, error) {
	rows, err := q.db.QueryContext(ctx, listLogsBySeverity, severity)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ParsedLog
	for rows.Next() {
		var i ParsedLog
		if err := rows.Scan(
			&i.ID,
			&i.Timestamp,
			&i.EventCategory,
			&i.SourceType,
			&i.Username,
			&i.Hostname,
			&i.Severity,
			&i.RawMessage,
			&i.IsBlacklisted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLogsByUsernameAndBlacklisted = `-- name: ListLogsByUsernameAndBlacklisted :many
SELECT id, timestamp, event_category, source_type, username, hostname, severity, raw_message, is_blacklisted FROM parsed_logs
WHERE username = $1 AND is_blacklisted = $2
ORDER BY timestamp DESC
LIMIT 100
`

type ListLogsByUsernameAndBlacklistedParams struct {
	Username      string
	IsBlacklisted bool
}

func (q *Queries) ListLogsByUsernameAndBlacklisted(ctx context.Context, arg ListLogsByUsernameAndBlacklistedParams) ([]ParsedLog, error) {
	rows, err := q.db.QueryContext(ctx, listLogsByUsernameAndBlacklisted, arg.Username, arg.IsBlacklisted)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ParsedLog
	for rows.Next() {
		var i ParsedLog
		if err := rows.Scan(
			&i.ID,
			&i.Timestamp,
			&i.EventCategory,
			&i.SourceType,
			&i.Username,
			&i.Hostname,
			&i.Severity,
			&i.RawMessage,
			&i.IsBlacklisted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
